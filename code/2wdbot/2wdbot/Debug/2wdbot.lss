
2wdbot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000664  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  000006fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000054c  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d9  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000209  00000000  00000000  00000edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000010e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001fe  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000337  00000000  00000000  000013ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	c9 c0       	rjmp	.+402    	; 0x19a <__vector_3>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	9c c0       	rjmp	.+312    	; 0x150 <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e4 e6       	ldi	r30, 0x64	; 100
  36:	f6 e0       	ldi	r31, 0x06	; 6
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a7 36       	cpi	r26, 0x67	; 103
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	df d0       	rcall	.+446    	; 0x214 <main>
  56:	04 c3       	rjmp	.+1544   	; 0x660 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <setSpeed>:
/// function to set motor speed.
/// speed can either be a positive or negative integer. Positive value signifies forward direction while negative value signifies reverse direction.
void setSpeed(int motor, int speed)
{
    // DDRV8835 - enable MODE pin for PWM operation
     if (!(PORTA & (1<<PA7))){
  5a:	df 9b       	sbis	0x1b, 7	; 27
        PORTA |= (1<<PA7);
  5c:	df 9a       	sbi	0x1b, 7	; 27
    }
    
    // left motor
    if(motor == 1){	
  5e:	81 30       	cpi	r24, 0x01	; 1
  60:	91 05       	cpc	r25, r1
  62:	a9 f4       	brne	.+42     	; 0x8e <setSpeed+0x34>
        // forward
        if(speed > 0){
  64:	16 16       	cp	r1, r22
  66:	17 06       	cpc	r1, r23
  68:	24 f4       	brge	.+8      	; 0x72 <setSpeed+0x18>
            PORTA |= (1<<PA3);
  6a:	db 9a       	sbi	0x1b, 3	; 27
            OCR1A = speed;
  6c:	7b bd       	out	0x2b, r23	; 43
  6e:	6a bd       	out	0x2a, r22	; 42
  70:	08 95       	ret
        }
        // reverse
        else if(speed < 0){
  72:	77 23       	and	r23, r23
  74:	3c f4       	brge	.+14     	; 0x84 <setSpeed+0x2a>
            speed = -speed;
            PORTA &= ~(1<<PA3);
  76:	db 98       	cbi	0x1b, 3	; 27
            PORTA |= (1<<PA3);
            OCR1A = speed;
        }
        // reverse
        else if(speed < 0){
            speed = -speed;
  78:	71 95       	neg	r23
  7a:	61 95       	neg	r22
  7c:	71 09       	sbc	r23, r1
            PORTA &= ~(1<<PA3);
            OCR1A = speed;
  7e:	7b bd       	out	0x2b, r23	; 43
  80:	6a bd       	out	0x2a, r22	; 42
  82:	08 95       	ret
        }
        else if(speed == 0){
  84:	67 2b       	or	r22, r23
  86:	c9 f4       	brne	.+50     	; 0xba <setSpeed+0x60>
            OCR1A = speed;
  88:	1b bc       	out	0x2b, r1	; 43
  8a:	1a bc       	out	0x2a, r1	; 42
  8c:	08 95       	ret
        }        
    }
    // right motor
    else if(motor == 2){
  8e:	02 97       	sbiw	r24, 0x02	; 2
  90:	a1 f4       	brne	.+40     	; 0xba <setSpeed+0x60>
        // forward
        if(speed > 0){
  92:	16 16       	cp	r1, r22
  94:	17 06       	cpc	r1, r23
  96:	24 f4       	brge	.+8      	; 0xa0 <setSpeed+0x46>
            PORTA |= (1<<PA4);
  98:	dc 9a       	sbi	0x1b, 4	; 27
            OCR1B = speed;
  9a:	79 bd       	out	0x29, r23	; 41
  9c:	68 bd       	out	0x28, r22	; 40
  9e:	08 95       	ret
        }
        // reverse
        else if(speed < 0){
  a0:	77 23       	and	r23, r23
  a2:	3c f4       	brge	.+14     	; 0xb2 <setSpeed+0x58>
            speed = -speed;
            PORTA &= ~(1<<PA4);
  a4:	dc 98       	cbi	0x1b, 4	; 27
            PORTA |= (1<<PA4);
            OCR1B = speed;
        }
        // reverse
        else if(speed < 0){
            speed = -speed;
  a6:	71 95       	neg	r23
  a8:	61 95       	neg	r22
  aa:	71 09       	sbc	r23, r1
            PORTA &= ~(1<<PA4);
            OCR1B = speed;
  ac:	79 bd       	out	0x29, r23	; 41
  ae:	68 bd       	out	0x28, r22	; 40
  b0:	08 95       	ret
        }   
        else if(speed == 0){
  b2:	67 2b       	or	r22, r23
  b4:	11 f4       	brne	.+4      	; 0xba <setSpeed+0x60>
            OCR1B = speed;
  b6:	19 bc       	out	0x29, r1	; 41
  b8:	18 bc       	out	0x28, r1	; 40
  ba:	08 95       	ret

000000bc <stopMotors>:
}

/// function to stop motors.
void stopMotors()
{
    OCR1A = OCR1B = 0;
  bc:	19 bc       	out	0x29, r1	; 41
  be:	18 bc       	out	0x28, r1	; 40
  c0:	1b bc       	out	0x2b, r1	; 43
  c2:	1a bc       	out	0x2a, r1	; 42
  c4:	08 95       	ret

000000c6 <getDistance>:
/// begin HCSR04
float getDistance()
{
    float distance = 0.0;
	
    cli();
  c6:	f8 94       	cli
	
    // interrupt enable
    GIMSK |= 1<<PCIE1;
  c8:	8b b7       	in	r24, 0x3b	; 59
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	8b bf       	out	0x3b, r24	; 59
    // enable pin
    PCMSK1 |= 1<<PCINT10;
  ce:	80 b5       	in	r24, 0x20	; 32
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	80 bd       	out	0x20, r24	; 32
	
    sei();
  d4:	78 94       	sei
	
    // reset echo flag
    echoDone = 0;
  d6:	10 92 66 00 	sts	0x0066, r1
    // reset counter
    countTimer0 = 0;
  da:	10 92 62 00 	sts	0x0062, r1
  de:	10 92 63 00 	sts	0x0063, r1
  e2:	10 92 64 00 	sts	0x0064, r1
  e6:	10 92 65 00 	sts	0x0065, r1
    
    // send 10us trigger pulse
	
    PORTB &= ~(1<<PB0);
  ea:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <getDistance+0x2a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <getDistance+0x30>
  f6:	00 00       	nop
    _delay_ms(20);
    PORTB |= (1<<PB0);
  f8:	c0 9a       	sbi	0x18, 0	; 24
  fa:	8f eb       	ldi	r24, 0xBF	; 191
  fc:	9d e5       	ldi	r25, 0x5D	; 93
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <getDistance+0x38>
 102:	00 c0       	rjmp	.+0      	; 0x104 <getDistance+0x3e>
 104:	00 00       	nop
    _delay_ms(12);
    PORTB &= ~(1<<PB0);
 106:	c0 98       	cbi	0x18, 0	; 24
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	9c e9       	ldi	r25, 0x9C	; 156
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <getDistance+0x46>
 110:	00 c0       	rjmp	.+0      	; 0x112 <getDistance+0x4c>
 112:	00 00       	nop
    _delay_ms(20);
    
    // listen for echo
    while(!echoDone);
 114:	80 91 66 00 	lds	r24, 0x0066
 118:	88 23       	and	r24, r24
 11a:	e1 f3       	breq	.-8      	; 0x114 <getDistance+0x4e>
	
    // disable interrupt
    GIMSK &= ~(1<<PCIE1);
 11c:	8b b7       	in	r24, 0x3b	; 59
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	8b bf       	out	0x3b, r24	; 59
    // disable pin
    PCMSK1 &= ~(1<<PCINT10);
 122:	80 b5       	in	r24, 0x20	; 32
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	80 bd       	out	0x20, r24	; 32

    // calculate duration
    float duration = countTimer0/8000000.0;
 128:	60 91 62 00 	lds	r22, 0x0062
 12c:	70 91 63 00 	lds	r23, 0x0063
 130:	80 91 64 00 	lds	r24, 0x0064
 134:	90 91 65 00 	lds	r25, 0x0065
 138:	72 d1       	rcall	.+740    	; 0x41e <__floatunsisf>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	34 e2       	ldi	r19, 0x24	; 36
 13e:	44 ef       	ldi	r20, 0xF4	; 244
 140:	5a e4       	ldi	r21, 0x4A	; 74
 142:	05 d1       	rcall	.+522    	; 0x34e <__divsf3>
	
    // distance = duration * speed of sound * 0.5;
    // distance(in cms) = duration * 340.26 * 0.5 * 100
    // distance = 17013 * duration
    distance = 17013.0 * duration;
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	3a ee       	ldi	r19, 0xEA	; 234
 148:	44 e8       	ldi	r20, 0x84	; 132
 14a:	56 e4       	ldi	r21, 0x46	; 70
 14c:	fa d1       	rcall	.+1012   	; 0x542 <__mulsf3>
	
    return distance;
}
 14e:	08 95       	ret

00000150 <__vector_11>:

/// timer overflow handler
ISR(TIM0_OVF_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
    countTimer0 += 256;
 162:	80 91 62 00 	lds	r24, 0x0062
 166:	90 91 63 00 	lds	r25, 0x0063
 16a:	a0 91 64 00 	lds	r26, 0x0064
 16e:	b0 91 65 00 	lds	r27, 0x0065
 172:	9f 5f       	subi	r25, 0xFF	; 255
 174:	af 4f       	sbci	r26, 0xFF	; 255
 176:	bf 4f       	sbci	r27, 0xFF	; 255
 178:	80 93 62 00 	sts	0x0062, r24
 17c:	90 93 63 00 	sts	0x0063, r25
 180:	a0 93 64 00 	sts	0x0064, r26
 184:	b0 93 65 00 	sts	0x0065, r27
}
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_3>:


/// pin-change interrupt handler
ISR(PCINT1_vect)
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
    // read PCINT10
    if (PINB & (1<<PB2)){
 1ae:	b2 9b       	sbis	0x16, 2	; 22
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <__vector_3+0x26>
        //start 16 bit timer
        // Divide by 1 - prescalar
        TCCR0B |= 1<<CS00;
 1b2:	83 b7       	in	r24, 0x33	; 51
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	83 bf       	out	0x33, r24	; 51
        // set interrupt overflow flag
        TIMSK0 |= 1<<TOIE0;
 1b8:	89 b7       	in	r24, 0x39	; 57
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	89 bf       	out	0x39, r24	; 57
 1be:	1c c0       	rjmp	.+56     	; 0x1f8 <__vector_3+0x5e>
    }    
    else{
        // stop timer
        TCCR0B &= ~(1<<CS00);
 1c0:	83 b7       	in	r24, 0x33	; 51
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	83 bf       	out	0x33, r24	; 51
        // calculate time elapsed
        countTimer0 += TCNT0;
 1c6:	22 b7       	in	r18, 0x32	; 50
 1c8:	80 91 62 00 	lds	r24, 0x0062
 1cc:	90 91 63 00 	lds	r25, 0x0063
 1d0:	a0 91 64 00 	lds	r26, 0x0064
 1d4:	b0 91 65 00 	lds	r27, 0x0065
 1d8:	82 0f       	add	r24, r18
 1da:	91 1d       	adc	r25, r1
 1dc:	a1 1d       	adc	r26, r1
 1de:	b1 1d       	adc	r27, r1
 1e0:	80 93 62 00 	sts	0x0062, r24
 1e4:	90 93 63 00 	sts	0x0063, r25
 1e8:	a0 93 64 00 	sts	0x0064, r26
 1ec:	b0 93 65 00 	sts	0x0065, r27
        // reset counter - TCNT0
        TCNT0 = 0;
 1f0:	12 be       	out	0x32, r1	; 50
        // set flag
        echoDone = 1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 66 00 	sts	0x0066, r24
    }    
}
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <ledOff>:

void ledOff()
{
    PORTA &= ~((1 << PA0)| (1 << PA1) | (1 << PA2));
 20c:	8b b3       	in	r24, 0x1b	; 27
 20e:	88 7f       	andi	r24, 0xF8	; 248
 210:	8b bb       	out	0x1b, r24	; 27
 212:	08 95       	ret

00000214 <main>:
{
    // pin set-up
	
    // PB0 - trigger
    // PB2 - echo (input)
	DDRB |= (1<<PB0);
 214:	b8 9a       	sbi	0x17, 0	; 23
	
    // PA0, PA1, PA2 = R,G,B leads of the LED
    // PA3 = GPIO for motor 1, PA4 = GPIO for motor 2
    // PA6, PA5 = OC1A, OC1B - PWM
    // PA7 = MODE pin HIGH for PWM mode in DRV8835
	DDRA |= (1<<PA7) | (1<<PA6) | (1<<PA5) | (1<<PA4) | (1<<PA3) | (1<<PA2) | (1<<PA1) | (1<<PA0);
 216:	8a b3       	in	r24, 0x1a	; 26
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	8a bb       	out	0x1a, r24	; 26

    // TIMER1 PWM configurations
    // Phase Correct PWM, TOP = 0xFF
    TCCR1A |= 1<<WGM10;
 21c:	8f b5       	in	r24, 0x2f	; 47
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	8f bd       	out	0x2f, r24	; 47
    // CLK/8 pre-scalar for 2KHz motor frequency
    TCCR1B |= 1<<CS11;
 222:	8e b5       	in	r24, 0x2e	; 46
 224:	82 60       	ori	r24, 0x02	; 2
 226:	8e bd       	out	0x2e, r24	; 46
    // register clear while in PWM mode
    TCCR1C = 0x00;
 228:	12 bc       	out	0x22, r1	; 34
	
    // Phase correct pwm ON - non-inverting mode
    TCCR1A |= (1<<COM1A1)|(1<<COM1B1);
 22a:	8f b5       	in	r24, 0x2f	; 47
 22c:	80 6a       	ori	r24, 0xA0	; 160
 22e:	8f bd       	out	0x2f, r24	; 47
	
    // move forward 
    dir = 1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 60 00 	sts	0x0060, r24
    setSpeed(1, 80);
 236:	60 e5       	ldi	r22, 0x50	; 80
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0d df       	rcall	.-486    	; 0x5a <setSpeed>
    setSpeed(2, 80);
 240:	60 e5       	ldi	r22, 0x50	; 80
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	08 df       	rcall	.-496    	; 0x5a <setSpeed>
    // led = green
    PORTA |= 1<<PA0;
 24a:	d8 9a       	sbi	0x1b, 0	; 27
    
    float prevDist = 0.0;
 24c:	c1 2c       	mov	r12, r1
 24e:	d1 2c       	mov	r13, r1
 250:	e1 2c       	mov	r14, r1
 252:	f1 2c       	mov	r15, r1
                // forward
                // led = green
                PORTA |= 1<<PA0;
                setSpeed(1, 80);
                setSpeed(2, 80);
                dir = 1;		
 254:	bb 24       	eor	r11, r11
 256:	b3 94       	inc	r11
    // led = green
    PORTA |= 1<<PA0;
    
    float prevDist = 0.0;
    while(1){
        float dist = getDistance();
 258:	36 df       	rcall	.-404    	; 0xc6 <getDistance>
 25a:	06 2f       	mov	r16, r22
 25c:	17 2f       	mov	r17, r23
 25e:	d8 2f       	mov	r29, r24
 260:	c9 2f       	mov	r28, r25
		
        if(dist>400){
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	48 ec       	ldi	r20, 0xC8	; 200
 268:	53 e4       	ldi	r21, 0x43	; 67
 26a:	67 d1       	rcall	.+718    	; 0x53a <__gesf2>
 26c:	18 16       	cp	r1, r24
 26e:	24 f0       	brlt	.+8      	; 0x278 <__stack+0x19>
    // led = green
    PORTA |= 1<<PA0;
    
    float prevDist = 0.0;
    while(1){
        float dist = getDistance();
 270:	c0 2e       	mov	r12, r16
 272:	d1 2e       	mov	r13, r17
 274:	ed 2e       	mov	r14, r29
 276:	fc 2e       	mov	r15, r28
            dist = prevDist;
        }
		
        prevDist = dist;
		
        if(dist >= 10){
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	40 e2       	ldi	r20, 0x20	; 32
 27e:	51 e4       	ldi	r21, 0x41	; 65
 280:	6c 2d       	mov	r22, r12
 282:	7d 2d       	mov	r23, r13
 284:	8e 2d       	mov	r24, r14
 286:	9f 2d       	mov	r25, r15
 288:	58 d1       	rcall	.+688    	; 0x53a <__gesf2>
 28a:	88 23       	and	r24, r24
 28c:	dc f0       	brlt	.+54     	; 0x2c4 <__stack+0x65>
            if(!dir){
 28e:	80 91 60 00 	lds	r24, 0x0060
 292:	81 11       	cpse	r24, r1
 294:	0d c0       	rjmp	.+26     	; 0x2b0 <__stack+0x51>
                // forward
                // led = green
                PORTA |= 1<<PA0;
 296:	d8 9a       	sbi	0x1b, 0	; 27
                setSpeed(1, 80);
 298:	60 e5       	ldi	r22, 0x50	; 80
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	dc de       	rcall	.-584    	; 0x5a <setSpeed>
                setSpeed(2, 80);
 2a2:	60 e5       	ldi	r22, 0x50	; 80
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	d7 de       	rcall	.-594    	; 0x5a <setSpeed>
                dir = 1;		
 2ac:	b0 92 60 00 	sts	0x0060, r11
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	80 e7       	ldi	r24, 0x70	; 112
 2b4:	92 e0       	ldi	r25, 0x02	; 2
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <__stack+0x57>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <__stack+0x61>
 2c0:	00 00       	nop
 2c2:	3b c0       	rjmp	.+118    	; 0x33a <__stack+0xdb>
                }
            _delay_ms(100);
        }
        else{
            // turn off LED
            ledOff();
 2c4:	a3 df       	rcall	.-186    	; 0x20c <ledOff>
            // led = red    
            PORTA |= 1<<PA2;
 2c6:	da 9a       	sbi	0x1b, 2	; 27
             // stop
            stopMotors();
 2c8:	f9 de       	rcall	.-526    	; 0xbc <stopMotors>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	89 e6       	ldi	r24, 0x69	; 105
 2ce:	98 e1       	ldi	r25, 0x18	; 24
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <__stack+0x71>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <__stack+0x7b>
 2da:	00 00       	nop
            _delay_ms(1000);
            // turn off LED
            ledOff();
 2dc:	97 df       	rcall	.-210    	; 0x20c <ledOff>
            // led = blue
            PORTA |= 1<<PA1;
 2de:	d9 9a       	sbi	0x1b, 1	; 27
            // reverse
            setSpeed(1, -80);
 2e0:	60 eb       	ldi	r22, 0xB0	; 176
 2e2:	7f ef       	ldi	r23, 0xFF	; 255
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	b8 de       	rcall	.-656    	; 0x5a <setSpeed>
            setSpeed(2, -80);
 2ea:	60 eb       	ldi	r22, 0xB0	; 176
 2ec:	7f ef       	ldi	r23, 0xFF	; 255
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	b3 de       	rcall	.-666    	; 0x5a <setSpeed>
 2f4:	2f ef       	ldi	r18, 0xFF	; 255
 2f6:	83 ed       	ldi	r24, 0xD3	; 211
 2f8:	90 e3       	ldi	r25, 0x30	; 48
 2fa:	21 50       	subi	r18, 0x01	; 1
 2fc:	80 40       	sbci	r24, 0x00	; 0
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <__stack+0x9b>
 302:	00 c0       	rjmp	.+0      	; 0x304 <__stack+0xa5>
 304:	00 00       	nop
            _delay_ms(2000);
            // turn off LED
            ledOff();
 306:	82 df       	rcall	.-252    	; 0x20c <ledOff>
            // led = purple
            PORTA |= ((1<<PA2) | (1<<PA1));
 308:	8b b3       	in	r24, 0x1b	; 27
 30a:	86 60       	ori	r24, 0x06	; 6
 30c:	8b bb       	out	0x1b, r24	; 27
            // left
            setSpeed(1, 0);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	a1 de       	rcall	.-702    	; 0x5a <setSpeed>
            setSpeed(2, 80);
 318:	60 e5       	ldi	r22, 0x50	; 80
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	9c de       	rcall	.-712    	; 0x5a <setSpeed>
 322:	2f ef       	ldi	r18, 0xFF	; 255
 324:	89 e6       	ldi	r24, 0x69	; 105
 326:	98 e1       	ldi	r25, 0x18	; 24
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <__stack+0xc9>
 330:	00 c0       	rjmp	.+0      	; 0x332 <__stack+0xd3>
 332:	00 00       	nop
            _delay_ms(1000);
            // turn off LED
            ledOff();
 334:	6b df       	rcall	.-298    	; 0x20c <ledOff>
            // reset direction 
            dir = 0;
 336:	10 92 60 00 	sts	0x0060, r1
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	80 e7       	ldi	r24, 0x70	; 112
 33e:	92 e0       	ldi	r25, 0x02	; 2
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <__stack+0xe1>
 348:	00 c0       	rjmp	.+0      	; 0x34a <__stack+0xeb>
 34a:	00 00       	nop
 34c:	85 cf       	rjmp	.-246    	; 0x258 <main+0x44>

0000034e <__divsf3>:
 34e:	0c d0       	rcall	.+24     	; 0x368 <__divsf3x>
 350:	ba c0       	rjmp	.+372    	; 0x4c6 <__fp_round>
 352:	b2 d0       	rcall	.+356    	; 0x4b8 <__fp_pscB>
 354:	40 f0       	brcs	.+16     	; 0x366 <__divsf3+0x18>
 356:	a9 d0       	rcall	.+338    	; 0x4aa <__fp_pscA>
 358:	30 f0       	brcs	.+12     	; 0x366 <__divsf3+0x18>
 35a:	21 f4       	brne	.+8      	; 0x364 <__divsf3+0x16>
 35c:	5f 3f       	cpi	r21, 0xFF	; 255
 35e:	19 f0       	breq	.+6      	; 0x366 <__divsf3+0x18>
 360:	9b c0       	rjmp	.+310    	; 0x498 <__fp_inf>
 362:	51 11       	cpse	r21, r1
 364:	e4 c0       	rjmp	.+456    	; 0x52e <__fp_szero>
 366:	9e c0       	rjmp	.+316    	; 0x4a4 <__fp_nan>

00000368 <__divsf3x>:
 368:	bf d0       	rcall	.+382    	; 0x4e8 <__fp_split3>
 36a:	98 f3       	brcs	.-26     	; 0x352 <__divsf3+0x4>

0000036c <__divsf3_pse>:
 36c:	99 23       	and	r25, r25
 36e:	c9 f3       	breq	.-14     	; 0x362 <__divsf3+0x14>
 370:	55 23       	and	r21, r21
 372:	b1 f3       	breq	.-20     	; 0x360 <__divsf3+0x12>
 374:	95 1b       	sub	r25, r21
 376:	55 0b       	sbc	r21, r21
 378:	bb 27       	eor	r27, r27
 37a:	aa 27       	eor	r26, r26
 37c:	62 17       	cp	r22, r18
 37e:	73 07       	cpc	r23, r19
 380:	84 07       	cpc	r24, r20
 382:	38 f0       	brcs	.+14     	; 0x392 <__divsf3_pse+0x26>
 384:	9f 5f       	subi	r25, 0xFF	; 255
 386:	5f 4f       	sbci	r21, 0xFF	; 255
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	44 1f       	adc	r20, r20
 38e:	aa 1f       	adc	r26, r26
 390:	a9 f3       	breq	.-22     	; 0x37c <__divsf3_pse+0x10>
 392:	33 d0       	rcall	.+102    	; 0x3fa <__divsf3_pse+0x8e>
 394:	0e 2e       	mov	r0, r30
 396:	3a f0       	brmi	.+14     	; 0x3a6 <__divsf3_pse+0x3a>
 398:	e0 e8       	ldi	r30, 0x80	; 128
 39a:	30 d0       	rcall	.+96     	; 0x3fc <__divsf3_pse+0x90>
 39c:	91 50       	subi	r25, 0x01	; 1
 39e:	50 40       	sbci	r21, 0x00	; 0
 3a0:	e6 95       	lsr	r30
 3a2:	00 1c       	adc	r0, r0
 3a4:	ca f7       	brpl	.-14     	; 0x398 <__divsf3_pse+0x2c>
 3a6:	29 d0       	rcall	.+82     	; 0x3fa <__divsf3_pse+0x8e>
 3a8:	fe 2f       	mov	r31, r30
 3aa:	27 d0       	rcall	.+78     	; 0x3fa <__divsf3_pse+0x8e>
 3ac:	66 0f       	add	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	88 1f       	adc	r24, r24
 3b2:	bb 1f       	adc	r27, r27
 3b4:	26 17       	cp	r18, r22
 3b6:	37 07       	cpc	r19, r23
 3b8:	48 07       	cpc	r20, r24
 3ba:	ab 07       	cpc	r26, r27
 3bc:	b0 e8       	ldi	r27, 0x80	; 128
 3be:	09 f0       	breq	.+2      	; 0x3c2 <__divsf3_pse+0x56>
 3c0:	bb 0b       	sbc	r27, r27
 3c2:	80 2d       	mov	r24, r0
 3c4:	bf 01       	movw	r22, r30
 3c6:	ff 27       	eor	r31, r31
 3c8:	93 58       	subi	r25, 0x83	; 131
 3ca:	5f 4f       	sbci	r21, 0xFF	; 255
 3cc:	2a f0       	brmi	.+10     	; 0x3d8 <__divsf3_pse+0x6c>
 3ce:	9e 3f       	cpi	r25, 0xFE	; 254
 3d0:	51 05       	cpc	r21, r1
 3d2:	68 f0       	brcs	.+26     	; 0x3ee <__divsf3_pse+0x82>
 3d4:	61 c0       	rjmp	.+194    	; 0x498 <__fp_inf>
 3d6:	ab c0       	rjmp	.+342    	; 0x52e <__fp_szero>
 3d8:	5f 3f       	cpi	r21, 0xFF	; 255
 3da:	ec f3       	brlt	.-6      	; 0x3d6 <__divsf3_pse+0x6a>
 3dc:	98 3e       	cpi	r25, 0xE8	; 232
 3de:	dc f3       	brlt	.-10     	; 0x3d6 <__divsf3_pse+0x6a>
 3e0:	86 95       	lsr	r24
 3e2:	77 95       	ror	r23
 3e4:	67 95       	ror	r22
 3e6:	b7 95       	ror	r27
 3e8:	f7 95       	ror	r31
 3ea:	9f 5f       	subi	r25, 0xFF	; 255
 3ec:	c9 f7       	brne	.-14     	; 0x3e0 <__divsf3_pse+0x74>
 3ee:	88 0f       	add	r24, r24
 3f0:	91 1d       	adc	r25, r1
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	97 f9       	bld	r25, 7
 3f8:	08 95       	ret
 3fa:	e1 e0       	ldi	r30, 0x01	; 1
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	bb 1f       	adc	r27, r27
 404:	62 17       	cp	r22, r18
 406:	73 07       	cpc	r23, r19
 408:	84 07       	cpc	r24, r20
 40a:	ba 07       	cpc	r27, r26
 40c:	20 f0       	brcs	.+8      	; 0x416 <__divsf3_pse+0xaa>
 40e:	62 1b       	sub	r22, r18
 410:	73 0b       	sbc	r23, r19
 412:	84 0b       	sbc	r24, r20
 414:	ba 0b       	sbc	r27, r26
 416:	ee 1f       	adc	r30, r30
 418:	88 f7       	brcc	.-30     	; 0x3fc <__divsf3_pse+0x90>
 41a:	e0 95       	com	r30
 41c:	08 95       	ret

0000041e <__floatunsisf>:
 41e:	e8 94       	clt
 420:	09 c0       	rjmp	.+18     	; 0x434 <__floatsisf+0x12>

00000422 <__floatsisf>:
 422:	97 fb       	bst	r25, 7
 424:	3e f4       	brtc	.+14     	; 0x434 <__floatsisf+0x12>
 426:	90 95       	com	r25
 428:	80 95       	com	r24
 42a:	70 95       	com	r23
 42c:	61 95       	neg	r22
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	8f 4f       	sbci	r24, 0xFF	; 255
 432:	9f 4f       	sbci	r25, 0xFF	; 255
 434:	99 23       	and	r25, r25
 436:	a9 f0       	breq	.+42     	; 0x462 <__floatsisf+0x40>
 438:	f9 2f       	mov	r31, r25
 43a:	96 e9       	ldi	r25, 0x96	; 150
 43c:	bb 27       	eor	r27, r27
 43e:	93 95       	inc	r25
 440:	f6 95       	lsr	r31
 442:	87 95       	ror	r24
 444:	77 95       	ror	r23
 446:	67 95       	ror	r22
 448:	b7 95       	ror	r27
 44a:	f1 11       	cpse	r31, r1
 44c:	f8 cf       	rjmp	.-16     	; 0x43e <__floatsisf+0x1c>
 44e:	fa f4       	brpl	.+62     	; 0x48e <__floatsisf+0x6c>
 450:	bb 0f       	add	r27, r27
 452:	11 f4       	brne	.+4      	; 0x458 <__floatsisf+0x36>
 454:	60 ff       	sbrs	r22, 0
 456:	1b c0       	rjmp	.+54     	; 0x48e <__floatsisf+0x6c>
 458:	6f 5f       	subi	r22, 0xFF	; 255
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8f 4f       	sbci	r24, 0xFF	; 255
 45e:	9f 4f       	sbci	r25, 0xFF	; 255
 460:	16 c0       	rjmp	.+44     	; 0x48e <__floatsisf+0x6c>
 462:	88 23       	and	r24, r24
 464:	11 f0       	breq	.+4      	; 0x46a <__floatsisf+0x48>
 466:	96 e9       	ldi	r25, 0x96	; 150
 468:	11 c0       	rjmp	.+34     	; 0x48c <__floatsisf+0x6a>
 46a:	77 23       	and	r23, r23
 46c:	21 f0       	breq	.+8      	; 0x476 <__floatsisf+0x54>
 46e:	9e e8       	ldi	r25, 0x8E	; 142
 470:	87 2f       	mov	r24, r23
 472:	76 2f       	mov	r23, r22
 474:	05 c0       	rjmp	.+10     	; 0x480 <__floatsisf+0x5e>
 476:	66 23       	and	r22, r22
 478:	71 f0       	breq	.+28     	; 0x496 <__floatsisf+0x74>
 47a:	96 e8       	ldi	r25, 0x86	; 134
 47c:	86 2f       	mov	r24, r22
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	2a f0       	brmi	.+10     	; 0x48e <__floatsisf+0x6c>
 484:	9a 95       	dec	r25
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	88 1f       	adc	r24, r24
 48c:	da f7       	brpl	.-10     	; 0x484 <__floatsisf+0x62>
 48e:	88 0f       	add	r24, r24
 490:	96 95       	lsr	r25
 492:	87 95       	ror	r24
 494:	97 f9       	bld	r25, 7
 496:	08 95       	ret

00000498 <__fp_inf>:
 498:	97 f9       	bld	r25, 7
 49a:	9f 67       	ori	r25, 0x7F	; 127
 49c:	80 e8       	ldi	r24, 0x80	; 128
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	08 95       	ret

000004a4 <__fp_nan>:
 4a4:	9f ef       	ldi	r25, 0xFF	; 255
 4a6:	80 ec       	ldi	r24, 0xC0	; 192
 4a8:	08 95       	ret

000004aa <__fp_pscA>:
 4aa:	00 24       	eor	r0, r0
 4ac:	0a 94       	dec	r0
 4ae:	16 16       	cp	r1, r22
 4b0:	17 06       	cpc	r1, r23
 4b2:	18 06       	cpc	r1, r24
 4b4:	09 06       	cpc	r0, r25
 4b6:	08 95       	ret

000004b8 <__fp_pscB>:
 4b8:	00 24       	eor	r0, r0
 4ba:	0a 94       	dec	r0
 4bc:	12 16       	cp	r1, r18
 4be:	13 06       	cpc	r1, r19
 4c0:	14 06       	cpc	r1, r20
 4c2:	05 06       	cpc	r0, r21
 4c4:	08 95       	ret

000004c6 <__fp_round>:
 4c6:	09 2e       	mov	r0, r25
 4c8:	03 94       	inc	r0
 4ca:	00 0c       	add	r0, r0
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <__fp_round+0xc>
 4ce:	88 23       	and	r24, r24
 4d0:	52 f0       	brmi	.+20     	; 0x4e6 <__fp_round+0x20>
 4d2:	bb 0f       	add	r27, r27
 4d4:	40 f4       	brcc	.+16     	; 0x4e6 <__fp_round+0x20>
 4d6:	bf 2b       	or	r27, r31
 4d8:	11 f4       	brne	.+4      	; 0x4de <__fp_round+0x18>
 4da:	60 ff       	sbrs	r22, 0
 4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <__fp_round+0x20>
 4de:	6f 5f       	subi	r22, 0xFF	; 255
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	8f 4f       	sbci	r24, 0xFF	; 255
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	08 95       	ret

000004e8 <__fp_split3>:
 4e8:	57 fd       	sbrc	r21, 7
 4ea:	90 58       	subi	r25, 0x80	; 128
 4ec:	44 0f       	add	r20, r20
 4ee:	55 1f       	adc	r21, r21
 4f0:	59 f0       	breq	.+22     	; 0x508 <__fp_splitA+0x10>
 4f2:	5f 3f       	cpi	r21, 0xFF	; 255
 4f4:	71 f0       	breq	.+28     	; 0x512 <__fp_splitA+0x1a>
 4f6:	47 95       	ror	r20

000004f8 <__fp_splitA>:
 4f8:	88 0f       	add	r24, r24
 4fa:	97 fb       	bst	r25, 7
 4fc:	99 1f       	adc	r25, r25
 4fe:	61 f0       	breq	.+24     	; 0x518 <__fp_splitA+0x20>
 500:	9f 3f       	cpi	r25, 0xFF	; 255
 502:	79 f0       	breq	.+30     	; 0x522 <__fp_splitA+0x2a>
 504:	87 95       	ror	r24
 506:	08 95       	ret
 508:	12 16       	cp	r1, r18
 50a:	13 06       	cpc	r1, r19
 50c:	14 06       	cpc	r1, r20
 50e:	55 1f       	adc	r21, r21
 510:	f2 cf       	rjmp	.-28     	; 0x4f6 <__fp_split3+0xe>
 512:	46 95       	lsr	r20
 514:	f1 df       	rcall	.-30     	; 0x4f8 <__fp_splitA>
 516:	08 c0       	rjmp	.+16     	; 0x528 <__fp_splitA+0x30>
 518:	16 16       	cp	r1, r22
 51a:	17 06       	cpc	r1, r23
 51c:	18 06       	cpc	r1, r24
 51e:	99 1f       	adc	r25, r25
 520:	f1 cf       	rjmp	.-30     	; 0x504 <__fp_splitA+0xc>
 522:	86 95       	lsr	r24
 524:	71 05       	cpc	r23, r1
 526:	61 05       	cpc	r22, r1
 528:	08 94       	sec
 52a:	08 95       	ret

0000052c <__fp_zero>:
 52c:	e8 94       	clt

0000052e <__fp_szero>:
 52e:	bb 27       	eor	r27, r27
 530:	66 27       	eor	r22, r22
 532:	77 27       	eor	r23, r23
 534:	cb 01       	movw	r24, r22
 536:	97 f9       	bld	r25, 7
 538:	08 95       	ret

0000053a <__gesf2>:
 53a:	6e d0       	rcall	.+220    	; 0x618 <__fp_cmp>
 53c:	08 f4       	brcc	.+2      	; 0x540 <__gesf2+0x6>
 53e:	8f ef       	ldi	r24, 0xFF	; 255
 540:	08 95       	ret

00000542 <__mulsf3>:
 542:	0a d0       	rcall	.+20     	; 0x558 <__mulsf3x>
 544:	c0 cf       	rjmp	.-128    	; 0x4c6 <__fp_round>
 546:	b1 df       	rcall	.-158    	; 0x4aa <__fp_pscA>
 548:	28 f0       	brcs	.+10     	; 0x554 <__mulsf3+0x12>
 54a:	b6 df       	rcall	.-148    	; 0x4b8 <__fp_pscB>
 54c:	18 f0       	brcs	.+6      	; 0x554 <__mulsf3+0x12>
 54e:	95 23       	and	r25, r21
 550:	09 f0       	breq	.+2      	; 0x554 <__mulsf3+0x12>
 552:	a2 cf       	rjmp	.-188    	; 0x498 <__fp_inf>
 554:	a7 cf       	rjmp	.-178    	; 0x4a4 <__fp_nan>
 556:	eb cf       	rjmp	.-42     	; 0x52e <__fp_szero>

00000558 <__mulsf3x>:
 558:	c7 df       	rcall	.-114    	; 0x4e8 <__fp_split3>
 55a:	a8 f3       	brcs	.-22     	; 0x546 <__mulsf3+0x4>

0000055c <__mulsf3_pse>:
 55c:	99 23       	and	r25, r25
 55e:	d9 f3       	breq	.-10     	; 0x556 <__mulsf3+0x14>
 560:	55 23       	and	r21, r21
 562:	c9 f3       	breq	.-14     	; 0x556 <__mulsf3+0x14>
 564:	95 0f       	add	r25, r21
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	55 1f       	adc	r21, r21
 56a:	aa 27       	eor	r26, r26
 56c:	ee 27       	eor	r30, r30
 56e:	ff 27       	eor	r31, r31
 570:	bb 27       	eor	r27, r27
 572:	00 24       	eor	r0, r0
 574:	08 94       	sec
 576:	67 95       	ror	r22
 578:	20 f4       	brcc	.+8      	; 0x582 <__mulsf3_pse+0x26>
 57a:	e2 0f       	add	r30, r18
 57c:	f3 1f       	adc	r31, r19
 57e:	b4 1f       	adc	r27, r20
 580:	0a 1e       	adc	r0, r26
 582:	22 0f       	add	r18, r18
 584:	33 1f       	adc	r19, r19
 586:	44 1f       	adc	r20, r20
 588:	aa 1f       	adc	r26, r26
 58a:	66 95       	lsr	r22
 58c:	a9 f7       	brne	.-22     	; 0x578 <__mulsf3_pse+0x1c>
 58e:	77 95       	ror	r23
 590:	30 f4       	brcc	.+12     	; 0x59e <__mulsf3_pse+0x42>
 592:	f3 0f       	add	r31, r19
 594:	b4 1f       	adc	r27, r20
 596:	0a 1e       	adc	r0, r26
 598:	12 1e       	adc	r1, r18
 59a:	08 f4       	brcc	.+2      	; 0x59e <__mulsf3_pse+0x42>
 59c:	63 95       	inc	r22
 59e:	33 0f       	add	r19, r19
 5a0:	44 1f       	adc	r20, r20
 5a2:	aa 1f       	adc	r26, r26
 5a4:	22 1f       	adc	r18, r18
 5a6:	76 95       	lsr	r23
 5a8:	99 f7       	brne	.-26     	; 0x590 <__mulsf3_pse+0x34>
 5aa:	87 95       	ror	r24
 5ac:	20 f4       	brcc	.+8      	; 0x5b6 <__mulsf3_pse+0x5a>
 5ae:	b4 0f       	add	r27, r20
 5b0:	0a 1e       	adc	r0, r26
 5b2:	12 1e       	adc	r1, r18
 5b4:	63 1f       	adc	r22, r19
 5b6:	44 0f       	add	r20, r20
 5b8:	aa 1f       	adc	r26, r26
 5ba:	22 1f       	adc	r18, r18
 5bc:	33 1f       	adc	r19, r19
 5be:	86 95       	lsr	r24
 5c0:	a9 f7       	brne	.-22     	; 0x5ac <__mulsf3_pse+0x50>
 5c2:	86 2f       	mov	r24, r22
 5c4:	71 2d       	mov	r23, r1
 5c6:	60 2d       	mov	r22, r0
 5c8:	11 24       	eor	r1, r1
 5ca:	9f 57       	subi	r25, 0x7F	; 127
 5cc:	50 40       	sbci	r21, 0x00	; 0
 5ce:	8a f0       	brmi	.+34     	; 0x5f2 <__mulsf3_pse+0x96>
 5d0:	e1 f0       	breq	.+56     	; 0x60a <__mulsf3_pse+0xae>
 5d2:	88 23       	and	r24, r24
 5d4:	4a f0       	brmi	.+18     	; 0x5e8 <__mulsf3_pse+0x8c>
 5d6:	ee 0f       	add	r30, r30
 5d8:	ff 1f       	adc	r31, r31
 5da:	bb 1f       	adc	r27, r27
 5dc:	66 1f       	adc	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	88 1f       	adc	r24, r24
 5e2:	91 50       	subi	r25, 0x01	; 1
 5e4:	50 40       	sbci	r21, 0x00	; 0
 5e6:	a9 f7       	brne	.-22     	; 0x5d2 <__mulsf3_pse+0x76>
 5e8:	9e 3f       	cpi	r25, 0xFE	; 254
 5ea:	51 05       	cpc	r21, r1
 5ec:	70 f0       	brcs	.+28     	; 0x60a <__mulsf3_pse+0xae>
 5ee:	54 cf       	rjmp	.-344    	; 0x498 <__fp_inf>
 5f0:	9e cf       	rjmp	.-196    	; 0x52e <__fp_szero>
 5f2:	5f 3f       	cpi	r21, 0xFF	; 255
 5f4:	ec f3       	brlt	.-6      	; 0x5f0 <__mulsf3_pse+0x94>
 5f6:	98 3e       	cpi	r25, 0xE8	; 232
 5f8:	dc f3       	brlt	.-10     	; 0x5f0 <__mulsf3_pse+0x94>
 5fa:	86 95       	lsr	r24
 5fc:	77 95       	ror	r23
 5fe:	67 95       	ror	r22
 600:	b7 95       	ror	r27
 602:	f7 95       	ror	r31
 604:	e7 95       	ror	r30
 606:	9f 5f       	subi	r25, 0xFF	; 255
 608:	c1 f7       	brne	.-16     	; 0x5fa <__mulsf3_pse+0x9e>
 60a:	fe 2b       	or	r31, r30
 60c:	88 0f       	add	r24, r24
 60e:	91 1d       	adc	r25, r1
 610:	96 95       	lsr	r25
 612:	87 95       	ror	r24
 614:	97 f9       	bld	r25, 7
 616:	08 95       	ret

00000618 <__fp_cmp>:
 618:	99 0f       	add	r25, r25
 61a:	00 08       	sbc	r0, r0
 61c:	55 0f       	add	r21, r21
 61e:	aa 0b       	sbc	r26, r26
 620:	e0 e8       	ldi	r30, 0x80	; 128
 622:	fe ef       	ldi	r31, 0xFE	; 254
 624:	16 16       	cp	r1, r22
 626:	17 06       	cpc	r1, r23
 628:	e8 07       	cpc	r30, r24
 62a:	f9 07       	cpc	r31, r25
 62c:	c0 f0       	brcs	.+48     	; 0x65e <__fp_cmp+0x46>
 62e:	12 16       	cp	r1, r18
 630:	13 06       	cpc	r1, r19
 632:	e4 07       	cpc	r30, r20
 634:	f5 07       	cpc	r31, r21
 636:	98 f0       	brcs	.+38     	; 0x65e <__fp_cmp+0x46>
 638:	62 1b       	sub	r22, r18
 63a:	73 0b       	sbc	r23, r19
 63c:	84 0b       	sbc	r24, r20
 63e:	95 0b       	sbc	r25, r21
 640:	39 f4       	brne	.+14     	; 0x650 <__fp_cmp+0x38>
 642:	0a 26       	eor	r0, r26
 644:	61 f0       	breq	.+24     	; 0x65e <__fp_cmp+0x46>
 646:	23 2b       	or	r18, r19
 648:	24 2b       	or	r18, r20
 64a:	25 2b       	or	r18, r21
 64c:	21 f4       	brne	.+8      	; 0x656 <__fp_cmp+0x3e>
 64e:	08 95       	ret
 650:	0a 26       	eor	r0, r26
 652:	09 f4       	brne	.+2      	; 0x656 <__fp_cmp+0x3e>
 654:	a1 40       	sbci	r26, 0x01	; 1
 656:	a6 95       	lsr	r26
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	81 1d       	adc	r24, r1
 65c:	81 1d       	adc	r24, r1
 65e:	08 95       	ret

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>
